import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from config import Config
from wildberries_parser import Parser
from excel_generator import ExcelGenerator
from database import Database
from datetime import datetime
import logging
from logging.handlers import RotatingFileHandler

class WildberriesBot:
    def __init__(self):
        self.config = Config()
        self.parser = Parser(self.config)
        self.excel_generator = ExcelGenerator()
        self.database = Database(self.config.DATABASE_NAME)
        self.logger = logging.getLogger('telegram_bot')
        self.setup_logging()
        self.application = None

    def setup_logging(self):
        log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        log_file = 'wildberries_bot.log'
        log_handler = RotatingFileHandler(log_file, maxBytes=5*1024*1024, backupCount=2)
        log_handler.setFormatter(log_formatter)
        self.logger.addHandler(log_handler)
        self.logger.setLevel(logging.INFO)

    async def menu(self, update: Update, context):
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data='get_reviews'),
            InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ", callback_data='check_new_reviews')],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data='list_products'),
            InlineKeyboardButton("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏", callback_data='manage_notifications')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ—Ç–∑—ã–≤–æ–≤ Wildberries! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
        if update.message:
            await update.message.reply_text(message_text, reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.message.edit_text(message_text, reply_markup=reply_markup)

    async def handle_input(self, update: Update, context):
        user_input = update.message.text.strip()
        if context.user_data.get('awaiting_subscription'):
            await self.process_subscription(update, context, user_input)
        elif user_input.startswith('[') and user_input.endswith(']') or user_input.startswith('http') or user_input.isdigit():
            await self.process_review_request(update, context, user_input)
        else:
            await self.menu(update, context)

    async def process_review_request(self, update: Update, context, user_input):
        await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        try:
            results = await self.parser.parse_multiple_products(user_input)
            
            for article, reviews in results:
                if reviews:
                    product_info = await self.parser.get_product_info(article)
                    if product_info:
                        self.database.save_reviews(article, reviews, datetime.now().isoformat())
                        self.database.save_product_info(product_info)
                        excel_file, filename = self.excel_generator.generate_excel(reviews, product_info)
                        await update.message.reply_document(
                            document=excel_file, 
                            filename=filename,
                            caption=f"üìä –û—Ç–∑—ã–≤—ã –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article}"
                        )
                    else:
                        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ {article}")
                else:
                    await update.message.reply_text(f"‚ùå –û—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {article} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
            
            if len(results) > 1:
                await update.message.reply_text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                
        except Exception as e:
            error_message = f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            self.logger.error(error_message)
            await update.message.reply_text(error_message)

    async def process_subscription(self, update: Update, context, user_input):
        context.user_data['awaiting_subscription'] = False
        user_id = update.effective_user.id
    
        if user_input.startswith('http'):
            article = self.parser.extract_article_from_url(user_input)
        else:
            article = user_input

        if not article:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
            return

        product_info = await self.parser.get_product_info(article)
        if not product_info:
            await update.message.reply_text(f"‚ùå –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º {article} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        self.database.subscribe_user(user_id, article)
        await update.message.reply_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_info['name']} (–∞—Ä—Ç–∏–∫—É–ª {article}).")
        
        keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data=f'fetch_subscribed_{article}')],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data='menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞?", reply_markup=reply_markup)

    async def fetch_subscribed_products(self, update: Update, context, articles):
        query = update.callback_query
        await query.answer()
        await query.message.edit_text("‚è≥ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        results = await asyncio.gather(*[self.parser.parse_single_product(article) for article in articles.split(',')])
        
        for article, reviews in results:
            if reviews:
                product_info = await self.parser.get_product_info(article)
                if product_info:
                    self.database.save_reviews(article, reviews, datetime.now().isoformat())
                    self.database.save_product_info(product_info)
                    excel_file, filename = self.excel_generator.generate_excel(reviews, product_info)
                    await query.message.reply_document(
                        document=excel_file, 
                        filename=filename,
                        caption=f"üìä –û—Ç–∑—ã–≤—ã –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article}"
                    )
                else:
                    await query.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ {article}")
            else:
                await query.message.reply_text(f"‚ùå –û—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {article} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        await query.message.reply_text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    async def list_products(self, update: Update, context):
        query = update.callback_query
        await query.answer()
        page = int(context.user_data.get('product_page', 1))
        products_per_page = 10
        
        total_products = self.database.get_total_products_count()
        total_pages = (total_products - 1) // products_per_page + 1
        
        products = self.database.get_products_page(page, products_per_page)
    
        if not products:
            await query.message.edit_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            return

        keyboard = []
        for product_id, product_name in products:
            keyboard.append([
                InlineKeyboardButton(f"üõçÔ∏è {product_id} - {product_name[:30]}...", callback_data=f'product_info_{product_id}'),
                InlineKeyboardButton("üì•", callback_data=f'download_{product_id}')
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        if page > 1:
            pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'product_page_{page-1}'))
        if page < total_pages:
            pagination_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f'product_page_{page+1}'))
        
        if pagination_buttons:
            keyboard.append(pagination_buttons)

        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')])
    
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(f"–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):", reply_markup=reply_markup)

    async def check_new_reviews_manual(self, update: Update, context):
        query = update.callback_query
        await query.answer()
        user_id = update.effective_user.id
        subscriptions = self.database.get_user_subscriptions(user_id)
        
        if not subscriptions:
            await query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã.")
            return

        await query.message.edit_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        new_reviews_found = False
        for product_id, product_name in subscriptions:
            last_review = self.database.get_latest_review(product_id)
            if last_review:
                new_reviews = await self.parser.check_new_reviews(product_id, last_review['date'])
                if new_reviews:
                    new_reviews_found = True
                    product_info = await self.parser.get_product_info(product_id)
                    excel_file, filename = self.excel_generator.generate_excel(new_reviews, product_info)
                    await query.message.reply_document(
                        document=excel_file,
                        filename=filename,
                        caption=f"üÜï –ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {product_id} - {product_name}"
                    )
                    self.database.save_reviews(product_id, new_reviews, datetime.now().isoformat())

        if not new_reviews_found:
            await query.message.edit_text("‚úÖ –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await query.message.edit_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    async def button_callback(self, update: Update, context):
        query = update.callback_query
        await query.answer()

        if query.data == 'get_reviews':
            await query.message.reply_text("üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª.")
        elif query.data == 'check_new_reviews':
            await self.check_new_reviews_manual(update, context)
        elif query.data == 'list_products':
            context.user_data['product_page'] = 1
            await self.list_products(update, context)
        elif query.data.startswith('product_page_'):
            context.user_data['product_page'] = int(query.data.split('_')[-1])
            await self.list_products(update, context)
        elif query.data == 'manage_notifications':
            await self.manage_notifications(update, context)
        elif query.data == 'help':
            await self.help_command(update, context)
        elif query.data == 'menu':
            await self.menu(update, context)
        elif query.data.startswith('download_'):
            product_id = query.data.split('_')[1]
            await self.download_product_reviews(update, context, product_id)
        elif query.data.startswith('fetch_subscribed_'):
            articles = query.data.split('_')[-1]
            await self.fetch_subscribed_products(update, context, articles)
        elif query.data == 'subscribe':
            await self.subscribe(update, context)
        elif query.data == 'unsubscribe':
            await self.unsubscribe(update, context)
        elif query.data == 'list_subscriptions':
            await self.list_subscriptions(update, context)
        elif query.data.startswith('unsub_'):
            product_id = query.data.split('_')[1]
            await self.unsubscribe_product(update, context, product_id)
        elif query.data.startswith('product_info_'):
            product_id = query.data.split('_')[-1]
            await self.show_product_info(update, context, product_id)

    async def download_product_reviews(self, update: Update, context, product_id):
        query = update.callback_query
        reviews, _ = self.database.get_reviews(product_id)
        if reviews:
            product_info = self.database.get_product_info(product_id)
            excel_file, filename = self.excel_generator.generate_excel(reviews, product_info)
            await query.message.reply_document(
                document=excel_file,
                filename=filename,
                caption=f"üìä –û—Ç–∑—ã–≤—ã –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {product_id}"
            )
        else:
            await query.message.reply_text(f"‚ùå –û—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    async def periodic_review_check(self, context):
        self.logger.info("–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.")
        subscriptions = self.database.get_all_subscriptions()

        for user_id, product_id, last_check_time in subscriptions:
            try:
                last_review = self.database.get_latest_review(product_id)
                if last_review:
                    new_reviews = await self.parser.check_new_reviews(product_id, last_review['date'])
                    if new_reviews:
                        product_info = await self.parser.get_product_info(product_id)
                        for review in new_reviews:
                            review_message = (
                                f"‚ùóÔ∏è–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ {review['stars']}‚≠êÔ∏è\n"
                                f"–û—Ç: {review['name']}\n"
                                f"{product_id} - {product_info['name']}\n"
                                f"–†–∞–∑–º–µ—Ä: {review.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                                f"–¶–≤–µ—Ç: {review.get('color', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                                f"{review['text']}"
                            )
                            await self.application.bot.send_message(
                                chat_id=user_id,
                                text=review_message
                            )
                        self.database.save_reviews(product_id, new_reviews, datetime.now().isoformat())
                        self.logger.info(f"–ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {product_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
                self.database.update_subscription_check_time(user_id, product_id)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {product_id}: {str(e)}")

        self.logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    async def manage_notifications(self, update: Update, context):
        query = update.callback_query
        keyboard = [
            [InlineKeyboardButton("‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data='subscribe'),
            InlineKeyboardButton("‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data='unsubscribe')],
            [InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data='list_subscriptions')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", reply_markup=reply_markup)

    async def subscribe(self, update: Update, context):
        query = update.callback_query
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.")
        context.user_data['awaiting_subscription'] = True

    async def unsubscribe(self, update: Update, context):
        query = update.callback_query
        user_id = update.effective_user.id
        subscriptions = self.database.get_user_subscriptions(user_id)
    
        if not subscriptions:
            await query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        keyboard = []
        for product_id, product_name in subscriptions:
            keyboard.append([InlineKeyboardButton(f"‚ùå {product_id} - {product_name[:30]}...", callback_data=f'unsub_{product_id}')])
    
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:", reply_markup=reply_markup)

    async def list_subscriptions(self, update: Update, context):
        query = update.callback_query
        user_id = update.effective_user.id
        subscriptions = self.database.get_user_subscriptions(user_id)
    
        if not subscriptions:
            await query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        keyboard = []
        for product_id, product_name in subscriptions:
            keyboard.append([
                InlineKeyboardButton(f"{product_id} - {product_name[:30]}...", url=f"https://www.wildberries.ru/catalog/{product_id}/detail.aspx"),
                InlineKeyboardButton("‚ùå", callback_data=f'unsub_{product_id}')
            ])

        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=reply_markup)

    async def unsubscribe_product(self, update: Update, context, product_id):
        query = update.callback_query
        user_id = update.effective_user.id
        self.database.unsubscribe_user(user_id, product_id)
        product_info = self.database.get_product_info(product_id)
        product_name = product_info['name'] if product_info else product_id
        await query.message.edit_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–æ–≤–∞—Ä–∞ {product_name} (–∞—Ä—Ç–∏–∫—É–ª {product_id})")

    async def help_command(self, update: Update, context):
        help_text = """
ü§ñ *–ü–æ–º–æ—â—å –±–æ—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤ Wildberries*

–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üèÅ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
üè† /menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ç–æ–≤–∞—Ä–∞–º —Å—Ä–∞–∑—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [–∞—Ä—Ç–∏–∫—É–ª1, –∞—Ä—Ç–∏–∫—É–ª2, ...]

–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∏–ª–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @destroy2create.
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def start(self, update: Update, context):
        await self.menu(update, context)

    def run(self):
        self.database.init_db()

        self.application = Application.builder().token(self.config.TELEGRAM_BOT_TOKEN).build()

        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("menu", self.menu))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_input))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))

        self.schedule_jobs()

        self.logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.application.run_polling()

    def schedule_jobs(self):
        if self.application:
            job_queue = self.application.job_queue
            job_queue.run_repeating(self.periodic_review_check, interval=3600, first=10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
            self.logger.info("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏")
        else:
            self.logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏: application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

if __name__ == '__main__':
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        filename='wildberries_bot.log',
        filemode='a'
    )
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    console_handler.setFormatter(formatter)
    logging.getLogger('').addHandler(console_handler)

    bot = WildberriesBot()
    bot.run()