from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from config import TELEGRAM_BOT_TOKEN
from wildberries_parser import parse_multiple_products
from excel_generator import generate_excel
from database import init_db, get_reviews, save_reviews, get_all_products
from datetime import datetime, timedelta
from dateutil import parser
import logging

logger = logging.getLogger('telegram_bot')

PRODUCTS_PER_PAGE = 10

async def menu(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data='get_reviews')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    
    products = get_all_products()
    if products:
        keyboard.append([InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data='list_products_0')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text("ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ—Ç–∑—ã–≤–æ–≤ Wildberries! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.edit_text("ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ—Ç–∑—ã–≤–æ–≤ Wildberries! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

async def list_products(update: Update, context, page=0):
    products = get_all_products()
    start = page * PRODUCTS_PER_PAGE
    end = start + PRODUCTS_PER_PAGE
    current_products = products[start:end]
    
    keyboard = [[InlineKeyboardButton(f"üè∑Ô∏è {product}", callback_data=f'show_product_{product}')] for product in current_products]
    
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f'list_products_{page-1}'))
    if end < len(products):
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f'list_products_{page+1}'))
    
    keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", reply_markup=reply_markup)

async def show_product(update: Update, context, product_id):
    reviews, _ = get_reviews(product_id)
    if reviews:
        excel_file, filename = generate_excel(reviews, product_id)
        await update.callback_query.message.reply_document(
            document=excel_file, 
            filename=filename,
            caption=f"üìä –û—Ç–∑—ã–≤—ã –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {product_id}"
        )
    else:
        await update.callback_query.message.reply_text("‚ùå –û—Ç–∑—ã–≤–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def button_callback(update: Update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'get_reviews':
        await query.message.reply_text("üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª.")
    elif query.data == 'help':
        help_text = """
        ü§ñ *–ü–æ–º–æ—â—å –±–æ—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤ Wildberries*

        –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

        üèÅ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        üè† /menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        ‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏

        –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã.

        –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∏–ª–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @destroy2create.
        """
        await query.message.reply_text(help_text, parse_mode='Markdown')
    elif query.data.startswith('list_products_'):
        page = int(query.data.split('_')[-1])
        await list_products(update, context, page)
    elif query.data.startswith('show_product_'):
        product_id = query.data.split('_')[-1]
        await show_product(update, context, product_id)
    elif query.data == 'menu':
        await menu(update, context)

async def handle_input(update: Update, context):
    user_input = update.message.text.strip()
    if user_input.startswith('[') and user_input.endswith(']') or user_input.startswith('http') or user_input.isdigit():
        await process_review_request(update, context, user_input)
    else:
        await menu(update, context)

async def process_review_request(update: Update, context, user_input):
    await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        results = await parse_multiple_products(user_input)
        
        for product_input, reviews in results:
            product_id = product_input.split('/')[-2] if '/' in product_input else product_input
            
            if reviews:
                save_reviews(product_id, reviews, datetime.now().isoformat())
                excel_file, filename = generate_excel(reviews, product_id)
                await update.message.reply_document(
                    document=excel_file, 
                    filename=filename,
                    caption=f"üìä –û—Ç–∑—ã–≤—ã –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {product_id}"
                )
            else:
                await update.message.reply_text(f"‚ùå –û—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        
        if len(results) > 1:
            await update.message.reply_text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    
    except Exception as e:
        error_message = f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_message)
        await update.message.reply_text(error_message)

async def help_command(update: Update, context):
    help_text = """
ü§ñ *–ü–æ–º–æ—â—å –±–æ—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤ Wildberries*

–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üèÅ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
üè† /menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã.

–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∏–ª–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @destroy2create.
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def start(update: Update, context):
    await menu(update, context)

def main():
    init_db()

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))
    application.add_handler(CallbackQueryHandler(button_callback))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()