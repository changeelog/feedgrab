from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup

class CallbackHandlers:
    def __init__(self, database, scheduler, parser):
        self.database = database
        self.scheduler = scheduler
        self.parser = parser

    async def button_callback(self, update: Update, context):
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        user_uuid = self.database.get_user_uuid(user_id)

        if query.data == 'get_reviews':
            await query.message.reply_text("üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª.")
        elif query.data == 'manage_notifications':
            await self.manage_notifications(update, context, user_uuid)
        elif query.data == 'help':
            await self.help_command(update, context)
        elif query.data == 'menu':
            await self.menu(update, context)
        elif query.data == 'subscribe':
            await self.subscribe(update, context)
        elif query.data == 'unsubscribe':
            await self.unsubscribe(update, context, user_uuid)
        elif query.data == 'list_subscriptions':
            await self.list_subscriptions(update, context, user_uuid)
        elif query.data.startswith('unsub_'):
            product_id = query.data.split('_')[1]
            await self.unsubscribe_product(update, context, user_uuid, product_id)

    async def manage_notifications(self, update: Update, context, user_uuid):
        query = update.callback_query
        keyboard = [
            [InlineKeyboardButton("‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data='subscribe'),
            InlineKeyboardButton("‚ûñ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data='unsubscribe')],
            [InlineKeyboardButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data='list_subscriptions')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", reply_markup=reply_markup)

    async def subscribe(self, update: Update, context):
        query = update.callback_query
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.")
        context.user_data['awaiting_subscription'] = True

    async def unsubscribe(self, update: Update, context, user_uuid):
        query = update.callback_query
        subscriptions = self.database.get_user_subscriptions(user_uuid)
    
        if not subscriptions:
            await query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        keyboard = []
        for product_id, product_name in subscriptions:
            keyboard.append([InlineKeyboardButton(f"‚ùå {product_id} - {product_name[:30]}...", callback_data=f'unsub_{product_id}')])
    
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:", reply_markup=reply_markup)

    async def list_subscriptions(self, update: Update, context, user_uuid):
        query = update.callback_query
        subscriptions = self.database.get_user_subscriptions(user_uuid)
    
        if not subscriptions:
            await query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        keyboard = []
        for product_id, product_name in subscriptions:
            keyboard.append([
                InlineKeyboardButton(f"{product_id} - {product_name[:30]}...", url=f"https://www.wildberries.ru/catalog/{product_id}/detail.aspx"),
                InlineKeyboardButton("‚ùå", callback_data=f'unsub_{product_id}')
            ])

        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=reply_markup)

    async def unsubscribe_product(self, update: Update, context, user_uuid, product_id):
        query = update.callback_query
        self.database.unsubscribe_user(user_uuid, product_id)
        self.scheduler.remove_job(user_uuid, product_id)
        product_info = self.database.get_product_info(product_id)
        product_name = product_info['name'] if product_info else product_id
        await query.message.edit_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–æ–≤–∞—Ä–∞ {product_name} (–∞—Ä—Ç–∏–∫—É–ª {product_id})")

    async def menu(self, update: Update, context):
        query = update.callback_query
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data='get_reviews')],
                        [InlineKeyboardButton("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏", callback_data='manage_notifications')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤ Wildberries! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

    async def help_command(self, update: Update, context):
        query = update.callback_query
        help_text = """
ü§ñ *–ü–æ–º–æ—â—å –±–æ—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤ Wildberries*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üèÅ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
üè† /menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏

üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö

–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:
1. –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –º–∏–Ω–∏–º—É–º 6 –∑–Ω–∞–∫–æ–≤)
2. –°—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ç–æ–≤–∞—Ä–∞–º —Å—Ä–∞–∑—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [–∞—Ä—Ç–∏–∫—É–ª1, –∞—Ä—Ç–∏–∫—É–ª2, ...]

–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∏–ª–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @destroy2create.
        """
        await query.message.edit_text(help_text, parse_mode='Markdown')
